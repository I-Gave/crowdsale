import assertRevert, { assertError } from '../helpers/assertRevert'
import { increaseTimeTo, duration } from '../helpers/increaseTime';

const BigNumber = web3.BigNumber

const DAPP = artifacts.require('IGVDAPP')

require('chai')
  .use(require('chai-as-promised'))
  .use(require('chai-bignumber')(BigNumber))
  .should()

const expect = require('chai').expect

contract('Exploit Test', accounts => {
  const [creator, user, anotherUser, operator, mallory] = accounts
  let dapp = null

  beforeEach(async () => {
    dapp = await DAPP.new()
  })

  describe('Dos Gas Revert', () => {
    it('Maxes the certificates then vetoes', async () => {
      await dapp.changeMaxCertificates(1000);
      const max = await dapp.maxCertificates();

      await dapp.createCampaign('Test Campaign', '501cid');

      console.log(`Adding 1000 certs to a campaign...`);

      for (let i = 0; i < 1000; i++) {
        if (i % 100 === 0) {
          console.log(`${i}/1000`);
        }
        await dapp.createCertificate(1, 10, "Test Certificate", 10);
      }
      console.log(`Complete`);
      await dapp.vetoCampaign(1);
    })
    it('Re-Entrancy on campaign withdraw uses .transfer');
    it('Storage Allocation Exploit - All Structs are initialized');
    it('Underflow/Overflow Conditions');
  })
})

